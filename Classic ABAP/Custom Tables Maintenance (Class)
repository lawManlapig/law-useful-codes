CLASS zcl_custom_tables_maintenance DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    " Static Methods
    CLASS-METHODS:
      get_instance
        IMPORTING
          im_v_user        TYPE bname
        RETURNING
          VALUE(re_object) TYPE REF TO zcl_custom_tables_maintenance.

    " Instance Methods
    METHODS:
      display_list_of_tables.

  PROTECTED SECTION.
  PRIVATE SECTION.

    " Structures
    TYPES:
      BEGIN OF ls_main_alv,
        tables        TYPE zdt_ztabs_maint,
        create_button TYPE icon-id,
        update_button TYPE icon-id,
      END OF ls_main_alv,

      ltt_main_alv TYPE STANDARD TABLE OF ls_main_alv
                   WITH DEFAULT KEY.

    CLASS-DATA:
      object_reference TYPE REF TO zcl_custom_tables_maintenance,
      user_id          TYPE bname.

    DATA:
      lt_popup_data     TYPE REF TO data,
      lo_popup_alv      TYPE REF TO cl_salv_table,
      lt_output_table   TYPE ltt_main_alv,
      lv_tabname        TYPE tabname,
      lv_button_pressed TYPE string.

    CONSTANTS:
      BEGIN OF lc_message_types,
        error       TYPE c VALUE 'E',
        success     TYPE c VALUE 'S',
        information TYPE c VALUE 'I',
      END OF lc_message_types,

      BEGIN OF lc_buttons,
        create TYPE c LENGTH 13 VALUE 'CREATE_BUTTON',
        update TYPE c LENGTH 13 VALUE 'UPDATE_BUTTON',
      END OF lc_buttons.

    METHODS:
      get_data
        RETURNING
          VALUE(re_list) TYPE ltt_main_alv,

      display_main_alv
        IMPORTING
          im_t_output_table TYPE ANY TABLE,

      display_popup_alv
        IMPORTING
          im_v_table_name TYPE tabname,

      button_click
        FOR EVENT link_click OF cl_salv_events_table
        IMPORTING
          row
          column,

      get_user_command
        FOR EVENT added_function OF cl_salv_events_table,

      set_popup_data_to_editable.

ENDCLASS.



CLASS zcl_custom_tables_maintenance IMPLEMENTATION.

  METHOD get_instance.

    IF re_object IS NOT BOUND.

      CREATE OBJECT object_reference.

      " Initialize other value/s
      user_id = im_v_user.

    ENDIF.

    re_object = object_reference.

  ENDMETHOD.

  METHOD display_list_of_tables.

    " Get data
    DATA(lt_list) = get_data( ).

    " Build + Display ALV
    IF lt_list IS NOT INITIAL.
      display_main_alv( lt_list ).
    ELSE.

      MESSAGE |No hits found!|
      TYPE lc_message_types-information
      DISPLAY LIKE lc_message_types-error.

    ENDIF.

  ENDMETHOD.

  METHOD get_data.

    SELECT FROM zdt_ztabs_maint
        FIELDS *
        WHERE user_id = @user_id
        INTO TABLE @re_list.

  ENDMETHOD.

  METHOD display_main_alv.

    DATA: lo_main_alv   TYPE REF TO cl_salv_table,
          lo_columns    TYPE REF TO cl_salv_columns_list,
          lo_column     TYPE REF TO cl_salv_column_table,
          lo_selections TYPE REF TO cl_salv_selections,
          lo_events     TYPE REF TO cl_salv_events_table.

    lt_output_table = VALUE ltt_main_alv(
            FOR <lfs_rows>
            IN im_t_output_table
            (
                tables = <lfs_rows>
                create_button = '@0Y@'
                update_button = '@0Z@'
            ) ).

    TRY.

        cl_salv_table=>factory(
          IMPORTING
            r_salv_table = lo_main_alv
          CHANGING
            t_table      = lt_output_table
        ).

      CATCH cx_salv_msg INTO DATA(lx_salv_msg).
        MESSAGE lx_salv_msg TYPE lc_message_types-error.
    ENDTRY.

    DATA(lo_display_settings) = lo_main_alv->get_display_settings( ).
    lo_display_settings->set_striped_pattern( abap_true ). " Enable zebra pattern

    TRY.
        " ALV Columns Settings
        lo_columns = lo_main_alv->get_columns( ).

        lo_column ?= lo_columns->get_column( 'TABLES-USER_ID' ).
        lo_column->set_technical( abap_true ).

        lo_column ?= lo_columns->get_column( 'TABLES-CLIENT' ).
        lo_column->set_technical( abap_true ).

        lo_column ?= lo_columns->get_column( 'TABLES-TABLE_NAME' ).
        lo_column->set_output_length( 16 ).

        " Set up Button
        lo_column ?= lo_columns->get_column( 'UPDATE_BUTTON' ).
        lo_column->set_icon( abap_true ).
        lo_column->set_cell_type( if_salv_c_cell_type=>button ).
        lo_column->set_output_length( 4 ).

        lo_column ?= lo_columns->get_column( 'CREATE_BUTTON' ).
        lo_column->set_icon( abap_true ).
        lo_column->set_cell_type( if_salv_c_cell_type=>button ).
        lo_column->set_output_length( 4 ).

        " Selection Settings
        lo_selections = lo_main_alv->get_selections( ).
        lo_selections->set_selection_mode( if_salv_c_selection_mode=>cell ).

        " Event Handlers
        lo_events = lo_main_alv->get_event(  ).

        SET HANDLER button_click FOR lo_events.

      CATCH cx_salv_not_found.
        " Error Handling here...
    ENDTRY.

    " Display
    lo_main_alv->display( ).

  ENDMETHOD.

  METHOD button_click.

    " Initialize
    FREE: lo_popup_alv,
          lt_popup_data.

    " Get the Selected Table
    ASSIGN lt_output_table[ row ] TO FIELD-SYMBOL(<lfs_table>).

    IF sy-subrc IS INITIAL.

      lv_button_pressed = column.
      display_popup_alv( im_v_table_name = <lfs_table>-tables-table_name ).

    ENDIF.

  ENDMETHOD.

  METHOD display_popup_alv.

    FIELD-SYMBOLS: <lt_table_popup> TYPE STANDARD TABLE.

    DATA:
      lo_columns   TYPE REF TO cl_salv_columns_table,
      lo_functions TYPE REF TO cl_salv_functions,
      lo_events    TYPE REF TO cl_salv_events_table.

    lv_tabname = im_v_table_name.

    " Create typed table
    IF lt_popup_data IS NOT BOUND.
      CREATE DATA lt_popup_data TYPE STANDARD TABLE OF (im_v_table_name).
    ENDIF.

    " Assign to dynamic field symbol
    ASSIGN lt_popup_data->* TO <lt_table_popup>.

    IF <lt_table_popup> IS INITIAL.

      IF lv_button_pressed EQ lc_buttons-create.
        APPEND INITIAL LINE TO <lt_table_popup>.
      ELSEIF lv_button_pressed EQ lc_buttons-update.

        " Get the results only if for Update/Modification
        SELECT FROM (im_v_table_name)
          FIELDS *
          INTO TABLE @<lt_table_popup>.

      ENDIF.

    ENDIF.

    TRY.

        cl_salv_table=>factory(
          IMPORTING
            r_salv_table = lo_popup_alv
          CHANGING
            t_table      = <lt_table_popup>
        ).

        " ALV Columns Settings
        lo_columns = lo_popup_alv->get_columns( ).
        lo_columns->set_optimize( abap_true ).

        " Functions
        lo_functions = lo_popup_alv->get_functions( ).

        " Custom PF Status
        lo_popup_alv->set_screen_status(
            EXPORTING
                report = sy-cprog
                pfstatus = COND #( WHEN lv_button_pressed EQ lc_buttons-create THEN 'ZSTANDARD' ELSE 'ZSTANDARD_MODIFY' )
                set_functions = cl_salv_table=>c_functions_all
        ).

        " Event handlers
        lo_events = lo_popup_alv->get_event( ).
        SET HANDLER get_user_command FOR lo_events.

        " Set listener
        DATA(lo_listener) = NEW lcl_listener( ).
        lo_popup_alv->extended_grid_api( )->editable_restricted( )->set_listener( lo_listener ).

        " ALV Customization
        set_popup_data_to_editable( ).

        " Dumps
      CATCH cx_salv_msg INTO DATA(lx_salv_msg).
        MESSAGE lx_salv_msg TYPE lc_message_types-error.
      CATCH cx_salv_not_found INTO DATA(lx_salv_not_found).
        MESSAGE lx_salv_not_found TYPE lc_message_types-error.
      CATCH cx_salv_object_not_found INTO DATA(lx_salv_object_not_found).
        MESSAGE lx_salv_object_not_found TYPE lc_message_types-error.
    ENDTRY.

    DATA(lo_display_settings) = lo_popup_alv->get_display_settings( ).
    lo_display_settings->set_striped_pattern( abap_true ). " Enable zebra pattern

    " Pop-up window settings
    lo_popup_alv->set_screen_popup(
      start_column = 10
      end_column   = 150 " Pop-up width
      start_line   = 5
      end_line     = 20
    ).

    " Sort before display
    SORT <lt_table_popup>.

    " Display
    lo_popup_alv->display( ).

  ENDMETHOD.

  METHOD get_user_command.

    DATA: lt_delete_table TYPE REF TO data,
          lt_rows         TYPE salv_t_row,
          lv_answer       TYPE string.

    FIELD-SYMBOLS:
      <lt_table_popup>  TYPE STANDARD TABLE,
      <lt_delete_table> TYPE STANDARD TABLE.

    DATA(lo_selections) = lo_popup_alv->get_selections( ).

    CASE sy-ucomm.

      WHEN '&MDFY'.

        " Get the current data and add a new row
        ASSIGN lt_popup_data->* TO <lt_table_popup>.
        APPEND INITIAL LINE TO <lt_table_popup> ASSIGNING FIELD-SYMBOL(<lfs_new_entry>).

        lo_popup_alv->refresh( ).

      WHEN '&CXSV'.

        " Get the current data
        ASSIGN lt_popup_data->* TO <lt_table_popup>.

        " Validate
        lo_popup_alv->extended_grid_api( )->editable_restricted( )->validate_changed_data(
            IMPORTING
                is_input_data_valid = DATA(lv_result)
        ).

        " Modify the Table
        IF lv_result EQ abap_true.

          MODIFY (lv_tabname) FROM TABLE <lt_table_popup>.

          MESSAGE 'Changes saved!'
          TYPE lc_message_types-information
          DISPLAY LIKE lc_message_types-success.

          FREE: <lt_table_popup>.

          " Get the results from modified data
          SELECT FROM (lv_tabname)
            FIELDS *
            INTO TABLE @<lt_table_popup>.

          IF lv_button_pressed EQ lc_buttons-create.
            lo_popup_alv->close_screen( ).
          ELSE.
            lo_popup_alv->refresh( ).
          ENDIF.

        ENDIF.

      WHEN '&CXDL'.

        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
            titlebar              = 'Confirmation'
            text_question         = 'Are you sure you want to delete the entries?'
            text_button_1         = 'Yes'
            text_button_2         = 'No'
            default_button        = '2' " Default to 'No'
            display_cancel_button = abap_true " Display a Cancel button
          IMPORTING
            answer                = lv_answer
          EXCEPTIONS
            text_not_found        = 1
            OTHERS                = 2.

        IF sy-subrc IS NOT INITIAL.
          " Error Handling here...
        ELSEIF lv_answer EQ '1'.

          " Generate dynamic delete table
          CREATE DATA lt_delete_table TYPE STANDARD TABLE OF (lv_tabname).
          ASSIGN lt_delete_table->* TO <lt_delete_table>.

          " Get current data
          ASSIGN lt_popup_data->* TO <lt_table_popup>.

          " Get the row number
          lt_rows = lo_selections->get_selected_rows( ).

          IF lines( lt_rows ) > 0.

            LOOP AT lt_rows ASSIGNING FIELD-SYMBOL(<lfs_rows>).

              " Read from current table
              ASSIGN <lt_table_popup>[ <lfs_rows> ]
              TO FIELD-SYMBOL(<lfs_read_data>).

              IF sy-subrc IS INITIAL.
                " Add to delete table
                APPEND <lfs_read_data> TO <lt_delete_table>.
              ENDIF.

            ENDLOOP.

            " Delete from table
            IF <lt_delete_table> IS NOT INITIAL.

              DELETE (lv_tabname) FROM TABLE <lt_delete_table>.

              MESSAGE 'Entries Deleted!'
              TYPE lc_message_types-information
              DISPLAY LIKE lc_message_types-success.

              FREE: <lt_table_popup>.

              " Get the results from modified data
              SELECT FROM (lv_tabname)
                FIELDS *
                INTO TABLE @<lt_table_popup>.

              lo_popup_alv->refresh( ).

            ENDIF.

          ENDIF.

        ELSE.

          MESSAGE 'Action Cancelled!'
          TYPE lc_message_types-information
          DISPLAY LIKE lc_message_types-success.

        ENDIF.

    ENDCASE.

  ENDMETHOD.

  METHOD set_popup_data_to_editable.

    FIELD-SYMBOLS: <lt_table_popup> TYPE STANDARD TABLE.

    DATA: lo_table_description TYPE REF TO cl_abap_tabledescr,
          lo_structure         TYPE REF TO cl_abap_structdescr,
          lo_columns           TYPE REF TO cl_salv_columns_list,
          lo_column            TYPE REF TO cl_salv_column_list,
          lt_components        TYPE abap_compdescr_tab.

    " Initialize values
    ASSIGN lt_popup_data->* TO <lt_table_popup>.
    lo_columns = lo_popup_alv->get_columns( ).

    " Get the field names
    lo_table_description ?= cl_abap_typedescr=>describe_by_data( <lt_table_popup> ).
    lo_structure ?= lo_table_description->get_table_line_type( ).

    " Get the field descriptions
    DATA(lt_table_fields) = NEW ddfields( lo_structure->get_ddic_field_list(  ) ).
    ASSIGN lt_table_fields->* TO FIELD-SYMBOL(<lfs_table_fields>).

    LOOP AT <lfs_table_fields> ASSIGNING FIELD-SYMBOL(<lfs_components>).

      DATA(lv_is_editable) = abap_true.

      TRY.

          " Highlight column if key field
          IF lv_button_pressed EQ lc_buttons-update AND
             <lfs_components>-keyflag EQ abap_true.

            lo_column ?= lo_columns->get_column( <lfs_components>-fieldname ).
            lo_column->set_key( abap_true ).

            lv_is_editable = abap_false.

          ENDIF.

          " Hide MANDT(CLIENT for some) field for all Tables
          IF <lfs_components>-fieldname EQ 'MANDT' OR
             <lfs_components>-fieldname EQ 'CLIENT'.

            lo_column ?= lo_columns->get_column( <lfs_components>-fieldname ).
            lo_column->set_visible( abap_false ).

          ENDIF.

          " Set Column to Editable
          lo_popup_alv->extended_grid_api( )->editable_restricted( )->set_attributes_for_columnname(
              EXPORTING
                  columnname = <lfs_components>-fieldname
                  all_cells_input_enabled = lv_is_editable
          ).

        CATCH cx_salv_not_found INTO DATA(lx_salv_not_found).
          " Do Nothing
      ENDTRY.

    ENDLOOP.

  ENDMETHOD.

ENDCLASS.
