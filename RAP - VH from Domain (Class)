CLASS zcl_get_domain_fixed_values DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES if_rap_query_provider .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS zcl_get_domain_fixed_values IMPLEMENTATION.


  METHOD if_rap_query_provider~select.
    DATA: lt_business_data TYPE STANDARD TABLE OF zdt_i_domain_fixed_values,
          lv_data_element  TYPE sxco_ad_object_name,
          lv_position      TYPE i.

    " Initialize Values
    DATA(lv_page_size) = io_request->get_paging( )->get_page_size( ).
    DATA(lv_offset) = io_request->get_paging( )->get_offset( ).
    DATA(lv_requested_fields) = io_request->get_requested_elements( ).
    DATA(lv_sort_order) = io_request->get_sort_elements( ).

    TRY.

        DATA(lv_filter_condition_string) = io_request->get_filter( )->get_as_sql_string( ).
        DATA(lt_filter_condition_ranges) = io_request->get_filter( )->get_as_ranges(  ).

        ASSIGN lt_filter_condition_ranges[ name = 'DOMAIN_NAME' ]
        TO FIELD-SYMBOL(<lfs_domain_name>).
        IF sy-subrc IS INITIAL.
          lv_data_element = <lfs_domain_name>-range[ 1 ]-low.
        ELSE.

          " Do some exception handling
          io_response->set_total_number_of_records( lines( lt_business_data ) ).
          io_response->set_data( lt_business_data ).
          EXIT.

        ENDIF.

        DATA(ls_business_data) = VALUE zdt_i_domain_fixed_values( domain_name = lv_data_element ).

        CAST cl_abap_elemdescr(
            cl_abap_typedescr=>describe_by_name( lv_data_element ) )->get_ddic_fixed_values(
              EXPORTING
                p_langu        = sy-langu
              RECEIVING
                p_fixed_values = DATA(lt_fixed_values)
              EXCEPTIONS
                not_found      = 1
                no_ddic_type   = 2
                OTHERS         = 3
        ).

        IF sy-subrc IS NOT INITIAL.

          " Do some exception handling
          io_response->set_total_number_of_records( lines( lt_business_data ) ).
          io_response->set_data( lt_business_data ).
          EXIT.

        ENDIF.

        LOOP AT lt_fixed_values ASSIGNING FIELD-SYMBOL(<lfs_fixed_value>).
          lv_position += 1.
          ls_business_data-pos = lv_position.
          ls_business_data-low = <lfs_fixed_value>-low .
          ls_business_data-high = <lfs_fixed_value>-high.
          ls_business_data-description = <lfs_fixed_value>-ddtext.

          APPEND ls_business_data TO lt_business_data.
        ENDLOOP.

        DATA(lv_max_index) = COND i( WHEN lv_page_size IS NOT INITIAL
                                     THEN lv_page_size + lv_offset
                                     ELSE 0 ).

        SELECT FROM @lt_business_data AS data_source_fields
            FIELDS *
            WHERE (lv_filter_condition_string)
            INTO TABLE @lt_business_data
            UP TO @lv_max_index ROWS.

        IF lv_offset IS NOT INITIAL.
          DELETE lt_business_data TO lv_offset.
        ENDIF.

        io_response->set_total_number_of_records( lines( lt_business_data ) ).
        io_response->set_data( lt_business_data ).

      CATCH cx_root INTO DATA(exception).

        DATA(exception_message) = cl_message_helper=>get_latest_t100_exception( exception )->if_message~get_longtext( ).
        DATA(exception_t100_key) = cl_message_helper=>get_latest_t100_exception( exception )->t100key.

        " Insert exception handling here...
    ENDTRY.
  ENDMETHOD.
ENDCLASS.
